use crate::ast::*;
use crate::enums::*;

grammar;


pub Alter: AlterNode = {
    AlterCollation
};


Quote = r#"""#;


Identifier = r"(?i)[a-z]\w+";


Name: String = {
    Quote <s: Identifier> Quote => s.to_string(),
    <s: Identifier> => s.to_string()
};


Qualified: QualifiedName = {
    <schema:(<Name> ".")?> <name:Name> => QualifiedName { schema: schema, name: name.to_string() }
};


AlterCollation: AlterNode = {
   "ALTER" "COLLATION" <name:Qualified> "REFRESH" "VERSION" => AlterCollationStmt { collation_name: name }.into()
};


AlterObjectDepends: AlterNode = {
    "ALTER" "INDEX" <index_name:Qualified> "DEPENDS" "ON" "EXTENSION" <ext_name:Name> => AlterObjectDependsStmt {
        object_kind: ObjectKind::Index,
        object: None,
        relation: Some(index_name),
        extension_name: ext_name,
    }.into(),
    "ALTER" "MATERIALIZED" "VIEW" <view_name:Qualified> "DEPENDS" "ON" "EXTENSION" <ext_name:Name> => AlterObjectDependsStmt {
        object_kind: ObjectKind::MatView,
        object: None,
        relation: Some(view_name),
        extension_name: ext_name,
    }.into(),
    "ALTER" "TRIGGER" <trig_name:Name> "ON" <table_name:Qualified> "DEPENDS" "ON" "EXTENSION" <ext_name:Name> => AlterObjectDependsStmt {
        object_kind: ObjectKind::Trigger,
        object: Some(QualifiedName { schema: None, name: trig_name.into() }.into()),
        relation: Some(table_name),
        extension_name: ext_name,
    }.into(),
}
